# -*- coding: utf-8 -*-
"""pneumonioa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XYMvQ_SfW0R7anjcYdYeDgR7RF3Syt9A
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.listdir('/content/drive/MyDrive/pneumoniadiagnosischestx-ray/dataset/chest_xray')

# import  laibaries for deep learning
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import pathlib
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np

data_dir ='/content/drive/MyDrive/pneumoniadiagnosischestx-ray/dataset/chest_xray'
data_dir_train ='/content/drive/MyDrive/pneumoniadiagnosischestx-ray/dataset/chest_xray/train'
data_dir_test='/content/drive/MyDrive/pneumoniadiagnosischestx-ray/dataset/chest_xray/test'
data_dir_val='/content/drive/MyDrive/pneumoniadiagnosischestx-ray/dataset/chest_xray/val'

# Data augmentation for the training set
train_generator = ImageDataGenerator( rescale=1/255 )
data_train = train_generator.flow_from_directory(data_dir_train ,target_size=(120, 120),batch_size=8,
    class_mode='binary')

# Data augmentation for the validing set
validation_generator = ImageDataGenerator( rescale=1/255 )
data_valid = validation_generator.flow_from_directory(data_dir_val,target_size=(120, 120),batch_size=8,
    class_mode='binary')

# Data augmentation for the testing set
test_generator = ImageDataGenerator( rescale=1/255 )
data_test = test_generator.flow_from_directory(data_dir_test,target_size=(120, 120),batch_size=8,
    class_mode='binary')

# Build cnn for predection
model = tf.keras.Sequential([tf.keras.layers.Conv2D(32, (7,7), input_shape=(120,120,3)),
                             tf.keras.layers.MaxPooling2D(2,2),
                             tf.keras.layers.Conv2D(64,(3,3) , activation='relu'),
                             tf.keras.layers.MaxPooling2D(2,2),
                             tf.keras.layers.Conv2D(128,(3,3), activation='relu'),
                             tf.keras.layers.MaxPooling2D(2,2),
                             tf.keras.layers.Conv2D(256,(3,3), activation='relu'),
                             tf.keras.layers.MaxPooling2D(2,2),
                             tf.keras.layers.Conv2D(512,(3,3), activation='relu'),
                             tf.keras.layers.MaxPooling2D(2,2),
                             tf.keras.layers.Flatten(),
                             tf.keras.layers.Dense(256,activation='relu'),
                             tf.keras.layers.Dense(1,activation='sigmoid')
                             ])

model.summary()

model.compile(optimizer='adam',
              loss=tf.keras.losses.BinaryCrossentropy(),
              metrics=['accuracy'])

history = model.fit(data_train, batch_size=32, epochs=3, validation_data=data_valid)

# Evaluate on the test set
test_loss, test_acc = model.evaluate(data_test)
print(f"Test Accuracy: {test_acc * 100:.2f}%")
print(f"Test loss: {test_loss * 100:.2f}%")

plt.plot(history.history['accuracy'] ,'g-o' , label = 'Train_accuracy')
plt.plot(history.history['val_accuracy'],'r-o' , label = 'Validation_accuracy')
plt.legend()
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Accuracy vs Epochs')
plt.show()

plt.plot(history.history['loss'] ,'g-o' ,label = 'Train_loss')
plt.plot(history.history['val_loss'],'r-o' , label = 'Validation_loss')
plt.legend()
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Loss vs Epochs')
plt.show()

predections = model.predict(data_test)
print(predections)

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np


img_path = '/content/drive/MyDrive/pneumoniadiagnosischestx-ray/dataset/chest_xray/test/PNEUMONIA/person100_bacteria_475.jpeg'
img = image.load_img(img_path, target_size=(120, 120))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)
prediction = model.predict(img_array)
print('Pneumonia Detected' if prediction[0][0] > 0.5 else 'Normal')